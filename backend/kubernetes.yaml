apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deployment
  labels:
    app: user
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user
  template:
    metadata:
      labels:
        app: user
    spec:
      containers:
      - name: user
        image: backend-user:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
        env:
        - name: MONGODB_URI
          value: "mongodb+srv://karthi:karthi@cluster0.4zomt2t.mongodb.net/?retryWrites=true&w=majority"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: socket-server-deployment
  labels:
    app: socket-server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: socket-server
  template:
    metadata:
      labels:
        app: socket-server
    spec:
      containers:
      - name: socket
        image: backend-socket-server:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8001
        env:
        - name: MONGODB_URI
          value: "mongodb+srv://karthi:karthi@cluster0.4zomt2t.mongodb.net/?retryWrites=true&w=majority"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: message-deployment
  labels:
    app: message
spec:
  replicas: 2
  selector:
    matchLabels:
      app: message
  template:
    metadata:
      labels:
        app: message
    spec:
      containers:
      - name: message
        image: backend-message:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8002
        env:
        - name: MONGODB_URI
          value: "mongodb+srv://karthi:karthi@cluster0.4zomt2t.mongodb.net/?retryWrites=true&w=majority"
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  type: NodePort
  selector:
    app: user
  ports:
    - protocol: TCP
      port: 8000
      targetPort: 8000
      nodePort: 31000
---
apiVersion: v1
kind: Service
metadata:
  name: socket-server-service
spec:
  type: NodePort
  selector:
    app: socket-server
  ports:
  - protocol: TCP
    port: 8001
    targetPort: 8001
    nodePort: 31001
---
apiVersion: v1
kind: Service
metadata:
  name: message-service
spec:
  type: NodePort
  selector:
    app: message
  ports:
  - protocol: TCP
    port: 8002
    targetPort: 8002
    nodePort: 31002
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-headers: Content-Type, authorization
    nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS
    nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:3000, http://buzz.test:3000"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  name: buzz-ingress
spec:
  ingressClassName: nginx
  rules:
  - host: buzz.test
    http:
      paths:
      - path: /user/v1(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: user-service
            port:
              number: 8000
      - path: /socket/v1(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: socket-server-service
            port:
              number: 8001
      - path: /message/v1(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: message-service
            port:
              number: 8002
